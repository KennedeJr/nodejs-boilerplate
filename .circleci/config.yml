version: 2.1

orbs:
  docker: circleci/docker@0.5.13

commands:
  all-tests:
    description: "Roda todos os testes do projeto (unitários e integração)"
    steps:
      - run: "npm t && npm run test:coverage-report"

jobs:
  node10x: &template
    docker:
      - image: circleci/node:10-jessie
        #auth:
          #username: $B2WADS_DOCKER_REGISTRY_USERNAME
          #password: $B2WADS_DOCKER_REGISTRY_PASSWORD
      #- image: mongo:3.6
      #- image: elasticsearch:5
      #- image: rabbitmq:3.6-alpine
      #- image: redis:5
    steps:
      - checkout
      - run:
          name: Install deps
          command: npm install
      - run:
          name: Format check
          command: npm run fmt:check
      - all-tests
      - run:
          when: on_success
          command: bash <(curl -s https://codecov.io/bash)
  node11x:
      <<: *template
      docker:
        - image: circleci/node:11
        #- image: mongo:3.6
        #- image: elasticsearch:5
        #- image: rabbitmq:3.6-alpine
        #- image: redis:5

  build-and-push:
    executor: docker/machine
    steps:
      - checkout
      - docker/check:
          registry: $B2WADS_DOCKER_REGISTRY
          docker-username: B2WADS_DOCKER_REGISTRY_USERNAME
          docker-password: B2WADS_DOCKER_REGISTRY_PASSWORD
      - docker/build: &build-and-push-template
          step-name: Building tag
          registry: $B2WADS_DOCKER_REGISTRY
          image: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
          tag: ${CIRCLE_SHA1:0:7}
      - docker/push:
          <<: *build-and-push-template
          step-name: "Pushing tag"
          tag: ${CIRCLE_SHA1:0:7}
      - docker/build:
          <<: *build-and-push-template
          step-name: Building latest
          tag: latest
      - docker/push:
          <<: *build-and-push-template
          step-name: Pushing latest
          tag: latest
      - run:
          name: Comment in PR the build status
          command: |
            GITHUB_PR_NUMBER=$(echo "$CIRCLE_PULL_REQUEST" | sed 's/.*\/pull\///g')
            GITHUB_PR_PAGE_PATH=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/issues/$GITHUB_PR_NUMBER/comments
            GITHUB_COMMIT_PAGE_PATH=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pull/$GITHUB_PR_NUMBER/commits/$CIRCLE_SHA1
            APP_IMAGE_TAG="${CIRCLE_SHA1:0:7}"
            APP_IMAGE=$B2WADS_DOCKER_REGISTRY/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
            MESSAGE_BODY=":robot: The docker image was pushed to registry!\n\n \
              :package: Built with commit [$APP_IMAGE_TAG](https://github.com/$GITHUB_COMMIT_PAGE_PATH) \n\n \
              :rocket: Pull this image in: \n - **$APP_IMAGE:$APP_IMAGE_TAG** \n - **$APP_IMAGE:latest**"
            curl -v -d  "{\"body\":\"$MESSAGE_BODY\"}" -H "Content-Type: application/json" \
            -H "Authorization: token $B2WADS_GITHUB_API_TOKEN" \
            -X POST "https://api.github.com/repos/${GITHUB_PR_PAGE_PATH}"

# O `context:` abaixo deve ser usado se você precisa
# de uma imagem privada. Nesse context devem estar cadastradas as envs:
# - B2WADS_DOCKER_REGISTRY_USERNAME
# - B2WADS_DOCKER_REGISTRY_PASSWORD
workflows:
  version: 2
  required-checks:
    jobs:
      - node10x:
          context: docker-registry-auth
      - build-and-push:
          requires:
            - node10x
          context: docker-registry-auth

  optional-checks:
    jobs:
      - node11x:
          context: docker-registry-auth
